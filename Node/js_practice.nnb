{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "#### Basics"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const name = 'Parichay'\r\nconst age = 32\r\nconst address = 'Dehradun'\r\nlet str = 'My name is Parichay,age is 32,address is Dehradun'\r\nconsole.log(str.split(','))\r\nconsole.log(`My name is ${name},age is ${age} and address is ${address}`)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 'My name is Parichay', 'age is 32', 'address is Dehradun' ]",
                                "My name is Parichay,age is 32 and address is Dehradun",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Reverse a string\r\nlet str = 'planet'\r\nlet newStr = ''\r\nfor(let i = str.length-1; i >= 0; i--) {\r\n    newStr += str[i]\r\n}\r\nconsole.log(newStr)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "tenalp",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Find largest in an array\r\nlet arr = [1,2,4,1,5,6]\r\nlet max = arr[0]\r\nfor (let i = 1; i <= arr.length - 1; i++) {\r\n    if (arr[i] > max) {\r\n        max = arr[i]\r\n    }\r\n}\r\nconsole.log(max)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "6",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Find second largest in an array\r\nlet arr = [1,2,4,1,5,6]\r\nlet max = arr[0]\r\nlet secondMax = arr[0]\r\n\r\nfor (i = 0; i <= arr.length - 1; i++) {\r\n    if (arr[i] > max) {\r\n        secondMax = max\r\n        max = arr[i]\r\n    }\r\n    else if (arr[i] > secondMax && arr[i] < max) {\r\n        secondMax = arr[i]\r\n    }\r\n}\r\nconsole.log(secondMax)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "5",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Balanced Parenthesis\r\nconst isValid = (s) => {\r\n    const brackets = {'(':')','{':'}','[':']'}\r\n    let stack = []\r\n\r\n    for (let i = 0; i < s.length; i++) {\r\n        if (brackets[s[i]]) {\r\n            stack.push(s[i])\r\n        }\r\n        else if (stack.length === 0 || s[i] !== brackets[stack.pop()]) {\r\n            return false\r\n        }\r\n        }\r\n        return stack.length === 0\r\n    }    \r\n\r\nlet s = '(())({})'\r\nconsole.log(isValid(s)) "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Arrow Function and ternery operator\r\nconst convertTemp = (value,unit) => (unit === 'K') ? value + 273 : value - 273           // using ternery operator\r\n\r\nlet unit = 'K'\r\nlet value = 300\r\nconsole.log(convertTemp(value,unit))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "573",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// Class and Inheritance\r\n\r\nclass user {                                    // user class\r\n    static count                                // static variable\r\n    constructor(username,email,password) {      // constructor for user class\r\n        this.username = username\r\n        this.email = email\r\n        this.password = password\r\n        user.count++\r\n    }\r\n\r\n    printNumberOfUsers() {                      // class method\r\n        console.log(\"The number of users = \",user.count)\r\n    }\r\n}\r\n/**************************************************************************************** */\r\nclass member extends user {                     // new member class inheriting user class\r\n    constructor(username,email,password) {\r\n        super(username,email,password)\r\n        this.membershipactivetilldate = new Date(2024,2,8)\r\n        this.package = ''\r\n    }\r\n\r\n    purchaseMembership(membershippackagename) {         // class method\r\n        if(membershippackagename === 'MONTHLYPACKAGE') {\r\n          this.membershipactivetilldate.setMonth(this.membershipactivetilldate.getMonth() + 1)\r\n          this.package = 'MONTHLYPACKAGE'\r\n        } else {\r\n          this.membershipactivetilldate.setFullYear(this.membershipactivetilldate.getFullYear() + 1)\r\n          this.package = 'YEARLYPACKAGE'\r\n        }\r\n      }\r\n\r\n    subscriptionActiveTill() {                          // class method\r\n        console.log(this.username + \" is subscribed to \" + this.package + \" uptill \" + this.membershipactivetilldate.toDateString())\r\n    }\r\n}    \r\n/***************************************************************************************** */\r\nfunction createNewStudents(username, email, password, membershippackagename) {              // function\r\n    const mike = new member(username, email, password);  \r\n    mike.purchaseMembership(membershippackagename);\r\n    mike.subscriptionActiveTill();\r\n}\r\n\r\nlet membershippackagename = 'YEARLYPACKAGE'\r\nlet username = 'Mohan'\r\nlet email = 'mohan@gmail.com'\r\nlet password = 'fgfggdj'\r\ncreateNewStudents(username, email, password, membershippackagename)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Mohan is subscribed to YEARLYPACKAGE uptill Sat Mar 08 2025",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "var arr = [1, 2,3,5]\r\n\r\nvar newArr = arr.forEach((item, i ) => {\r\n\r\nconsole.log(item + 'index' + i)\r\n\r\nreturn item + i\r\n\r\n})\r\n\r\nprint(console.log(newArr))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1index0",
                                "2index1",
                                "3index2",
                                "5index3",
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "ReferenceError",
                                "message": "print is not defined",
                                "stack": "    at <Cell 9> [11, 5]\n    at <Cell 9> [9, 46]\n    at Script.runInContext (node:vm:133:12)\n    at Script.runInNewContext (node:vm:138:17)\n    at Object.runInNewContext (node:vm:296:38)\n    at C (c:\\Users\\parri\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:113345)\n    at t.execCode (c:\\Users\\parri\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:114312)\n    at k.<anonymous> (c:\\Users\\parri\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:142156)\n    at k.emit (node:events:518:28)\n    at k.emit (node:domain:488:12)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = 10;\r\n\r\n{\r\n\r\nconst a = 20;\r\n\r\n{\r\n\r\nconsole.log(a);\r\n\r\n}\r\n\r\nconsole.log(a)\r\n\r\n}\r\n\r\nconsole.log(a)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "20",
                                "20",
                                "10",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let b = 8\r\nfunction a() {\r\n    let b = 1\r\n    function y() {\r\n    let b = 2\r\n    function x() {\r\n        let b = 5\r\n        console.log(this.b)\r\n    }\r\n    x()\r\n}\r\ny()\r\n}\r\na()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "8",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let b = 8\r\nlet obj = {\r\n    a : 'inherited',\r\n    b : 'arrowed',\r\n    fun : function () {\r\n        console.log(\"'This' can be \" + this.a)\r\n    },\r\n    fun2 : () => {\r\n        console.log(\"'This' is \" + this.b)\r\n    }\r\n}\r\nobj.fun()\r\nobj.fun2()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "'This' can be inherited",
                                "'This' is 8",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const name = (arr)=>{\r\n    let i = 0\r\n    return () => {\r\n        if (i < arr.length) {\r\n        console.log('Hello '+arr[i]);\r\n        i++\r\n    }\r\n}\r\n\r\n}\r\n\r\nlet fun = name([\"Ram\",\"Shyam\"]);\r\n\r\nfun()// Print Hello Ram\r\n\r\nfun()//print Hello Shyam\r\n\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Hello Ram",
                                "Hello Shyam",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "let buyBike = (callback) => {\r\n    setTimeout( () => {\r\n      console.log(\"Bought Royal Enfield Himalayan\");\r\n      callback()\r\n    },2000);\r\n  };\r\n  \r\n  let planTrip = () => {\r\n    setTimeout( () => {\r\n      console.log(\"Trip to Ladakh planned\");\r\n    },1000);\r\n  };\r\n  \r\n  buyBike(planTrip);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                "Bought Royal Enfield Himalayan",
                                "Trip to Ladakh planned",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function bookSearchPromise() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        const bookSearch = Math.random() > 0.5\r\n        if (bookSearch) {\r\n          resolve(\"Book found\")\r\n        } else {\r\n          reject(\"Book not found\")\r\n        }\r\n      },3000)\r\n    }) \r\n  } \r\n  \r\n  bookSearchPromise()\r\n    .then((result) => {\r\n      console.log(result)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n    })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Book found",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function buyBike() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        resolve(\"Bought Royal Enfield Himalayan\")\r\n      },2000)\r\n    })\r\n  }\r\n  \r\n  function planTrip() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        resolve(\"Trip to Ladakh planned\")\r\n      },1000)\r\n    })\r\n  }\r\n  \r\n  function reachLadakh() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        resolve(\"Reached Ladakh\")\r\n      },1000)\r\n    })\r\n  }\r\n  \r\n  function visitPangongLake() {\r\n      setTimeout(() => {\r\n        console.log(\"Visited Pangong Lake\")\r\n      },500)\r\n  }\r\n  \r\n  buyBike().then((result) => {\r\n    console.log(result)\r\n    planTrip().then((result) => {\r\n      console.log(result)\r\n      reachLadakh().then((result) => {\r\n        console.log(result)\r\n        visitPangongLake()\r\n      })\r\n    })\r\n  })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Bought Royal Enfield Himalayan",
                                "",
                                "Trip to Ladakh planned",
                                "Reached Ladakh",
                                "Visited Pangong Lake",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function checkWeather() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        let goodWeather = Math.random() > 0.5\r\n        if (goodWeather) {\r\n          resolve(\"Let us go for picnic\")\r\n        } else {\r\n          reject(\"Error: It is cloudy\")\r\n        }\r\n      },3000)\r\n    })\r\n  }\r\n  \r\n  checkWeather()\r\n    .then((result) => {\r\n      console.log(result)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n    })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Let us go for picnic",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function orderFood() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        let foodDelivered = true\r\n        if (foodDelivered) {\r\n          resolve(\"Food delivered\")\r\n        } else {\r\n          reject(\"Food not delivered\")\r\n        }\r\n      },2000)\r\n    })\r\n  }\r\n\r\nfunction orderDessert() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        let dessertDelivered = true\r\n        if (dessertDelivered) {\r\n          resolve(\"Dessert delivered\")\r\n        } else {\r\n          reject(\"Dessert not delivered\")\r\n        }\r\n      },2000)\r\n    })\r\n  }\r\n\r\norderFood()\r\n  .then((foodMsg) => {\r\n    console.log(foodMsg)\r\n    return orderDessert()\r\n  })\r\n  .then((dessertMsg) => {\r\n    console.log(dessertMsg)\r\n    console.log(\"Dream Meal fulfilled\")\r\n  })\r\n  .catch((error) => {\r\n    console.log(error)\r\n    console.log(\"Dream Meal failed\")\r\n  })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Food delivered",
                                "Dream Meal fulfilled",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "function checkCar() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        let carReady = Math.random() > 0.5\r\n        if (carReady) {\r\n          resolve(\"Car is ready\")\r\n        } else {\r\n          reject(\"Error: Car needs maintenance\")\r\n        }\r\n      },2000)\r\n    })\r\n  }\r\n  \r\n  function packForPicnic() {\r\n    return new Promise((resolve,reject) => {\r\n      setTimeout(() => {\r\n        let picnicReady = Math.random() > 0.5\r\n        if (picnicReady) {\r\n          resolve(\"Packed everything for picnic\")\r\n        } else {\r\n          reject(\"Error: Not have some essentials\")\r\n        }\r\n      },1000)\r\n    })\r\n  }\r\n  \r\n  checkCar()\r\n    .then((carMsg) => {\r\n      console.log(carMsg)\r\n      return packForPicnic()\r\n    })\r\n    .then((picnicMsg) => {\r\n      console.log(picnicMsg)\r\n      console.log(\"Go for picnic\")\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n      console.log(\"Picnic cancelled\")\r\n    })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Car is ready",
                                "Packed everything for picnic",
                                "Go for picnic",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const projectorPromise = new Promise((resolve,reject) => {\r\n  setTimeout(() => {\r\n    const projectorInStock = Math.random() > 0.5\r\n    if (projectorInStock) {\r\n      resolve(\"Projector rented successfully\")\r\n    } else {\r\n      reject(\"Error: Projectors out of stock\")\r\n    }\r\n  },1000)\r\n})\r\n\r\nconst pizzasPromise = new Promise((resolve,reject) => {\r\n  setTimeout(() => {\r\n    const pizzaReady = Math.random() > 0.5\r\n    if (pizzaReady) {\r\n      resolve(\"Pizzas delivered at time\")\r\n    } else {\r\n      reject(\"Error: Pizzas not delivered on time\")\r\n    }\r\n  },2000)\r\n})\r\n\r\nconst friendsPromise = new Promise((resolve,reject) => {\r\n  setTimeout(() => {\r\n    const friendsPresent = Math.random() > 0.5\r\n    if (friendsPresent) {\r\n      resolve(\"Both friends available\")\r\n    } else {\r\n      reject(\"Error: Both friends not available\")\r\n    }\r\n  },3000)\r\n})\r\n\r\nPromise.all(projectorPromise,pizzasPromise,friendsPromise)\r\n  .then((results) => {\r\n    console.log(results)\r\n  })\r\n  .catch((error) => {\r\n    console.log(error)\r\n  })"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "async function boardingBus() {\r\n    try {\r\n      // Write your code here\r\n      function boardBusAt10() {\r\n        return new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            const busArrivesAt10 = Math.random() > 0.5;\r\n            if (busArrivesAt10) {\r\n              resolve(\"Board the bus\");\r\n            } else {\r\n              reject(\"Error: Bus is late\");\r\n            }\r\n          }, 3000);\r\n        });\r\n      }\r\n  \r\n      const step1 = await boardBusAt10()\r\n      console.log(step1)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  \r\n  boardingBus();"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Board the bus",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "console.log('start');\r\nconst promise1 = Promise.resolve().then(() => {\r\n  console.log('promise1');\r\n  const timer2 = setTimeout(() => {\r\n    console.log('timer2')\r\n  }, 0)\r\n});\r\nconst timer1 = setTimeout(() => {\r\n  console.log('timer1')\r\n  const promise2 = Promise.resolve().then(() => {\r\n    console.log('promise2')\r\n  })\r\n}, 0)\r\nconsole.log('end')"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}